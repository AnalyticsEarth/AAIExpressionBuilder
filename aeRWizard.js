define( [ "qlik",
	'text!./template.ng.html',
	'./definition',
	'text!./dialog-template.ng.html',
	'css!./aeRWizardStyle.css',
	'./wizardList',
	'util',
	'enigma',
	'autogenerated/qix/engine-api'
],
function ( qlik, template, definition, dialogTemplate, cssStyle, wizardList, Util, enigma, schema) {
	'use strict';
	return {
		support : {
			snapshot: false,
			export: false,
			exportData : false
		},
		template: template,
		definition: definition,
		controller: ['$scope','luiDialog', function ( $scope, luiDialog) {
			$scope.wizardList = wizardList;
			console.log($scope.component.model);
			console.log($scope.wizardList);

			$scope.layout.showTitles = false;

			console.log($scope);

			$scope.openWizard = function(){
				luiDialog.show({
					template: dialogTemplate,
					input: {
						selectedKey: '',
						wizardName: '',
						wizardList: $scope.wizardList,
						appModel: $scope.component.model.app
					},
					controller: ['$scope', function( $scope ) {



						console.log($scope.input.wizardList);


						var app = qlik.currApp(this);
						app.getList("FieldList", function(reply){
							console.log(reply);
							$scope.input.fieldList = reply;
								//var str = "";
								//$.each(reply.qFieldList.qItems, function(key, value) {
								//	str +=  value.qName + ' ';
								//});

								//alert(str);
						});

						$scope.objectByString = function(o, s) {
    						s = s.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
    						s = s.replace(/^\./, '');           // strip a leading dot
    						var a = s.split('.');
    						for (var i = 0, n = a.length; i < n; ++i) {
        						var k = a[i];
        						if (k in o) {
            						o = o[k];
        						} else {
            						return;
        						}
    						}
    						return o;
						};

						$scope.tabs = 'tab1';

						$scope.make_tab_active = function(tabid) {
    						$scope.tabs = 'tab'+tabid;
							console.log($scope.tabs);
						}

						$scope.make_tab_active(1);

						$scope.input.idList = [];

						$scope.input.aggList = ['Count','Sum','Min','Max','Avg'];

						$scope.input.dateAggList = [{level:'Week',frequency:52, function:'weekno(##DATE##)'} ,{level:'Month',frequency:12, function:'month(##DATE##)'}];

						$scope.changeWizard = function(wizKey){
							$scope.input.selectedKey = wizKey;
							$scope.input.wizardName = $scope.input.wizardList[wizKey].name;

							$scope.loadUI(wizKey);
						};

						$scope.loadUI = function(wizKey){
							console.log('Test: '+ wizKey);
							//$scope.input.wizProcess.drawWizard(wizKey);

							$scope.input.uiarray = null;
							$scope.input.codeTemplates = null;

							$scope.input.uiarray = $scope.input.wizardList[wizKey].parameters;
							$scope.input.uiarray.forEach(function(entry){
								entry.inputvalue = '';
								console.log('Process Template:' + entry);
							});


							$scope.input.codeTemplates = $scope.input.wizardList[wizKey].templates;

							$scope.input.codeTemplates.forEach(function(entry){
								entry.enabled = true;
								console.log('Process Template:' + entry);
							});

							$scope.input.vizTemplates = $scope.input.wizardList[wizKey].viz;

							$scope.input.vizTemplates.forEach(function(entry){
								entry.enabled = true;
								console.log('Process Viz:' + entry);
							});


						};

						$scope.completeTemplates = function(){
							$scope.input.codeTemplates.forEach(function(t){
								console.log('Process Template:');
								console.log(t);

								if(t.scriptType == 'r'){
									$scope.rScriptTemplate(t);
								}

								if(t.scriptType == 'nativedate'){
									$scope.nativeDateTemplate(t);
								}

								if(t.scriptType == 'nativefield'){
									$scope.nativeFieldTemplate(t);
								}

								if(t.scriptType == 'nativeagg'){
									$scope.nativeFieldAggTemplate(t);
								}


							});
						};

						$scope.rScriptTemplate = function(t){
							t.outCode = null;

								if(t.enabled){
									//Process Template
									var rScript = t.rscript;
									var qParams = '';
									$scope.input.uiarray.forEach(function(p){
										var regExp = new RegExp('##<'+p.scriptid+'>##','g');
										rScript = rScript.replace(regExp,p.scriptid);

										if(p.includeinfunction){
											if(qParams != ''){
												qParams = qParams + ', ';
											}
											var expressionvalue = '';
											if(p.includeagg){
												expressionvalue = p.aggvalue + '([' + p.inputvalue + '])';
											}else{
												expressionvalue = '[' + p.inputvalue + ']';
											}
											qParams = qParams + expressionvalue + ' as ' + p.scriptid;
										}

									});

									var output = t.qlikfunction + '(\'' + rScript + '\',' + qParams + ')';

									t.outCode = output;

									console.log(output);
								}
						};

						$scope.nativeDateTemplate = function(t){
							t.outCode = null;

								if(t.enabled){
									var output = '';
									//Would be better with a match, but looping for the moment!
									$scope.input.uiarray.forEach(function(p){
										if(p.scriptid == t.idForDate){
											output = p.dateaggvalue + '([' + p.inputvalue + '])';
										}
									});
									t.outCode = output;
								}
							console.log(output);

						};

						$scope.nativeFieldTemplate = function(t){
							t.outCode = null;

								if(t.enabled){
									var output = '';
									//Would be better with a match, but looping for the moment!
									$scope.input.uiarray.forEach(function(p){
										if(p.scriptid == t.idForField){
											output = '[' + p.inputvalue + ']';
										}
									});
									t.outCode = output;
								}
							console.log(output);

						};

						$scope.nativeFieldAggTemplate = function(t){
							t.outCode = null;

								if(t.enabled){
									var output = '';
									//Would be better with a match, but looping for the moment!
									$scope.input.uiarray.forEach(function(p){
										if(p.scriptid == t.idForField){
											output = p.aggvalue + '([' + p.inputvalue + '])';
										}
									});
									t.outCode = output;
								}
							console.log(output);

						};

						$scope.previewMeasures = function(){
							//Create measure

							console.log('Preview Measure Click');
							console.log($scope);

							$scope.completeTemplates();
							$scope.make_tab_active(2);
						};

						$scope.createItems = function(){
							$scope.previewMeasures();

							console.log('Items');
							var p = [];
							$scope.input.codeTemplates.forEach(function(t){
								console.log(t.outCode);

								if(t.type.toUpperCase() == 'DIMENSION'){
									var a = $scope.createDimension(t.outCode, t.name, t.description, [], t.id);
									p.push(a);
								}
								if(t.type.toUpperCase() == 'MEASURE'){
									var a = $scope.createMeasure(t.outCode, t.name, t.description, [], t.id);
									p.push(a);
								}

							});

							Promise.all(p).then(values => {
								console.log($scope.input.dimList);
								console.log($scope.input.measureList);
								$scope.input.vizTemplates.forEach(function(v){
									$scope.createMasterViz(v);
								});

							});

						};

						$scope.createDimension = function(aeExpression, aeTitle, aeDescription, aeTags, aeTemplateId){
							var dimJSON =
    								{
      									qInfo: {
        									qType: "dimension"
      									},
      									qDim: {
        									qGrouping: "N",
        									qFieldDefs: [
          										aeExpression
        									],
        									qFieldLabels: [
          										aeTitle
        									],
											title:aeTitle
      									},
	  									qMetaDef: {
	  										title:aeTitle,
											description:aeDescription,
											tags:aeTags
	  									}
    								};

							//var p = [];

							return $scope.input.appModel.createDimension(dimJSON).then((data) => {
								console.log('Create Dimension');
								console.log(data);
								var obj = {templateId:aeTemplateId,qixId:data.id};
								$scope.input.idList.push(obj);

							});


						};

						$scope.createMeasure = function(aeExpression, aeTitle, aeDescription, aeTags, aeTemplateId){
							var mesJSON =
    								{
      									qInfo: {
        									qType: "measure"
      									},
      									qMeasure: {
											qLabel:aeTitle,
        									qGrouping: "N",
        									qDef: aeExpression,
											qExpressions:[],
											qActiveExpression: 0
      									},
	  									qMetaDef: {
	  										title:aeTitle,
											description:aeDescription,
											tags:aeTags
	  									}
    								};

							return $scope.input.appModel.createMeasure(mesJSON).then((data) => {
								console.log('Create Measure');
								console.log(data);
								var obj = {templateId:aeTemplateId,qixId:data.id};
								$scope.input.idList.push(obj);
							});

						};

						$scope.createMasterViz = function(aeVizTemplate){
							console.log('Create Viz');
							if(aeVizTemplate.type){
								$.getJSON('../extensions/aeRWizard/' + aeVizTemplate.type + '.json', function(response){
									var vizJSON = response;

									vizJSON.qMetaDef.title = aeVizTemplate.title;
									vizJSON.qMetaDef.description = aeVizTemplate.description;

									aeVizTemplate.replacements.forEach(function(r){
										//var obj = $scope.objectByString(vizJSON, r.path);
										$scope.input.idList.forEach(function(vid){
											if(vid.templateId == r.template){
												console.log('Process ID: '+vid.qixId);
												//console.log(obj);
												var obj = $scope.objectByString(vizJSON, r.path);
												obj[r.key] = vid.qixId;
												//console.log(obj);
											}
										});
									});


									console.log(vizJSON);
									$scope.input.appModel.createObject(vizJSON).then((data) => {console.log('Create Viz'); console.log(data);});
								});
							}

						};

					}]
				});
			}
		}]
	};

} );
